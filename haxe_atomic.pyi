from typing import Generic, TypeVar

class AtomicBool:
	def __init__(self, value: bool):
		...
	def load(self) -> bool:
		...
	def store(self, value: bool) -> bool:
		...
	def exchange(self, value: bool) -> bool:
		...
	def compare_exchange(self, expected: bool, desired: bool) -> bool:
		...

class AtomicInt:
	def __init__(self, value: int):
		...
	def load(self) -> int:
		...
	def store(self, value: int) -> int:
		...
	def exchange(self, value: int) -> int:
		...
	def compare_exchange(self, expected: int, desired: int) -> int:
		...
	def fetch_add(self, val: int) -> int:
		...
	def fetch_sub(self, val: int) -> int:
		...
	def fetch_and(self, val: int) -> int:
		...
	def fetch_or(self, val: int) -> int:
		...
	def fetch_xor(self, val: int) -> int:
		...


T = TypeVar("T")

class AtomicObject(Generic[T]):
	def __init__(self, value: T):
		...
	def load(self) -> T:
		...
	def store(self, value: T):
		...
	def exchange(self, value: T) -> T:
		...
	def compare_exchange(self, expected: T, desired: T) -> T:
		...